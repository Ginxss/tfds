TEST RESULTS:
Every result is the average time over 100 runs.

The referred to "struct" is:
struct Object {
    char c;
    short s;
    int i;
    long l;
    float f;
};


ARRAY TEST

tf::array inserted 1000000 ints: 6 ms
std::vector pushed 1000000 ints: 36 ms

tf::array inserted 1000000 ints: 5 ms (with reserved space)
std::vector pushed 1000000 ints: 31 ms (with reserved space)

tf::array inserted 1000000 structs: 26 ms
std::vector pushed 1000000 structs: 50 ms

tf::array inserted 1000000 structs: 18 ms (with reserved space)
std::vector pushed 1000000 structs: 39 ms (with reserved space)

tf::array accessed 1000000 ints: 4 ms
std::vector accessed 1000000 ints: 3 ms

tf::array accessed 1000000 structs: 11 ms
std::vector accessed 1000000 structs: 11 ms

STACK TEST

tf::stack pushed 1000000 ints: 7 ms
tf::stack pushed 1000000 ints: 6 ms (with reserved space)
std::stack pushed 1000000 ints: 99 ms

tf::stack pushed 1000000 structs: 25 ms
tf::stack pushed 1000000 structs: 18 ms (with reserved space)
std::stack pushed 1000000 structs: 161 ms

tf::stack pushed and popped 1000000 ints: 13 ms
tf::stack pushed and popped 1000000 ints: 13 ms (with reserved space)
std::stack pushed and popped 1000000 ints: 191 ms

tf::stack pushed and popped 1000000 structs: 39 ms
tf::stack pushed and popped 1000000 structs: 30 ms (with reserved space)
std::stack pushed and popped 1000000 structs: 258 ms

LINKED LIST TEST

tf::linked_list added 1000000 ints: 53 ms
std::list added 1000000 ints: 138 ms

tf::linked_list added 1000000 structs: 67 ms
std::list added 1000000 structs: 136 ms

tf::linked_list added and popped 1000000 ints: 103 ms
std::list added and popped 1000000 ints: 205 ms

tf::linked_list added and popped 1000000 structs: 127 ms
std::list added and popped 1000000 structs: 209 ms

tf::linked_list iterated over 1000000 ints: 11 ms
std::list iterated over 1000000 ints: 32 ms

tf::linked_list iterated over 1000000 structs: 22 ms
std::list iterated over 1000000 structs: 38 ms

HASH TABLE TEST

tf::hash_table inserted 1000000 (int, int) pairs: 111 ms
std::unordered_map inserted 1000000 (int, int) pairs: 406 ms

tf::hash_table inserted 1000000 (std::string, struct) pairs: 295 ms
std::unordered_map inserted 1000000 (std::string, struct) pairs: 799 ms

tf::hash_table accessed 1000000 int values with int keys: 74 ms
std::unordered_map accessed 1000000 int values with int keys: 145 ms

tf::hash_table accessed 1000000 struct values with std::string keys: 234 ms
std::unordered_map accessed 1000000 struct values with std::string keys: 367 ms

SEARCH TREE TEST

tf::search_tree inserted 1000000 (int, int) pairs: 234 ms
std::map inserted 1000000 (int, int) pairs: 610 ms

tf::search_tree inserted 1000000 (std::string, struct) pairs: 1880 ms
std::map inserted 1000000 (std::string, struct) pairs: 2062 ms

tf::search_tree accessed 1000000 int values with int keys: 87 ms
std::map accessed 1000000 int values with int keys: 278 ms

tf::search_tree accessed 1000000 struct values with std::string keys: 1295 ms
std::map accessed 1000000 struct values with std::string keys: 1234 ms

tf::search_tree iterated over 1000000 int values with int keys: 37 ms
std::map iterated over 1000000 int values with int keys: 84 ms

tf::search_tree iterated over 1000000 int values with int keys: 90 ms
std::map iterated over 1000000 int values with int keys: 101 ms

MULTI SEARCH TREE TEST

tf::multi_search_tree inserted 1000000 unique (int, int) pairs: 272 ms
tf::multi_search_tree inserted 1000000 mixed (int, int) pairs: 191 ms
tf::multi_search_tree inserted 1000000 identical (int, int) pairs: 50 ms
std::multimap inserted 1000000 (int, int) unique pairs: 681 ms
std::multimap inserted 1000000 mixed (int, int) pairs: 687 ms
std::multimap inserted 1000000 identical (int, int) pairs: 677 ms

tf::multi_search_tree iterated over 1000000 int values with int keys: 48 ms (unique entries)
std::multimap iterated over 1000000 int values with int keys: 86 ms (unique entries)

tf::multi_search_tree iterated over 1000000 int values with int keys: 15 ms (identical entries)
std::multimap iterated over 1000000 int values with int keys: 85 ms (identical entries)